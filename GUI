from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
import sys
import pandas as pd

from selenium import webdriver
import pandas as pd
from bs4 import BeautifulSoup
from bs4.element import Comment
import re
import favicon
import requests
import os
import openpyxl
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
from bs4 import BeautifulSoup as bs
import time 
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.chrome.options import Options
import xlsxwriter
 

class Main(QWidget):

    def __init__(self):
        super(Main,self).__init__()

        self.setWindowTitle("Web Mining Program")
        self.setFixedSize(400, 300)

        self.filename  = None
        self.progressBarValue = 0


        # interface

        self.fileLabel = QLabel("File : ")
        self.fileLineEdit = QLineEdit()
        self.fileButton = QPushButton("Open")

        self.sheetNameLabel = QLabel("Sheet Name : ")
        self.sheetNameComboBox = QComboBox()
        self.sheetNameComboBox.setFixedWidth(300)
        
        self.runButton = QPushButton("Start")
        self.runLabel = QLabel()

        HBox0 = QHBoxLayout()
        HBox0.addWidget(self.fileLabel)
        HBox0.addWidget(self.fileLineEdit)
        HBox0.addWidget(self.fileButton)


        HBox1 = QHBoxLayout()
        HBox1.addWidget(self.sheetNameLabel)
        HBox1.addWidget(self.sheetNameComboBox)


        HBox2 = QHBoxLayout()
        HBox2.addWidget(self.runLabel)
        HBox2.addStretch()
        HBox2.addWidget(self.runButton)


        VBox0 = QVBoxLayout()
        VBox0.addLayout(HBox0)
        VBox0.addLayout(HBox1)
        VBox0.addLayout(HBox2)

        self.setLayout(VBox0)


        # Information Saved

        self.finishBox = QMessageBox()
        self.finishBox.setFixedSize(300, 200)
        self.finishBox.setWindowModality(Qt.ApplicationModal)
        self.finishBox.setIcon(QMessageBox.Information)
        self.finishBox.setText("Information Saved")
        self.finishBox.setWindowTitle("Finish!")
        self.finishBox.setStandardButtons(QMessageBox.Ok)
        
        
        
        
        # Functions Clicked
        self.fileButton.clicked.connect(self.openFile)
        self.runButton.clicked.connect(self.run)

        # 

        self.show()

    def tag_visible(self,element):
        if element.parent.name in ['style', 'script', 'head', 'title', 'meta', '[document]']:
            return False
        if isinstance(element, Comment):
            return False
        return True
    
    def check(self,email):
        regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
    
    
        if(re.fullmatch(regex, email)):
            return True
    
        else:
            return False
        
    def browser(self,url):
        # print(f"Browser url {url}")
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            driver =webdriver.Chrome(options=chrome_options)
        
        
            print("-----------------------------------------------------------------")
            driver.get(url)
            # soup = bs(driver.page_source, 'html.parser')
            # results = soup.select('#searchResultsTable > tbody')
        
            soup = BeautifulSoup(driver.page_source, 'html.parser')
            texts = soup.findAll(text=True)
            visible_texts = filter(self.tag_visible, texts)
            x = [t.strip() for t in visible_texts]
            valid = []
            for text in x:
                if("@" in text):
                    if(self.check(text)):
                        valid.append(text)
    
            phone_numbers = []
            for each_text in x:
                if(self.getPhone(each_text) != None):
                    phone_numbers.append(each_text)
    
        
           
            title = soup.find("title").text
    
            links_temp = []
        
            links = []
        
            for link in soup.findAll('a'):
        
                links_temp.append(link.get('href'))
        
        
            for o in links_temp:
                if(o == None):
                    pass
                else:
        
                    if("https" in o):
                        links.append(o)
                    else:
                        if(len(o) > 0):
                            if(o[0] == "/"):   
                                links.append(str(url)+str(o))
                    
            
            final_list = list()
            for link in links:
                if 'customer' in link:
                    final_list.append(link)
                if 'contact' in link or 'about' in link or 'service' in link:
                    final_list.append(link)
                if 'צור קשר' in link:
                    final_list.append(link)
            final_list.sort()
                
    
    
    
            if(len(valid) > 0):
                driver.close()
                if(len(phone_numbers)>0):
                    return [url,final_list,valid[0],phone_numbers[0],title]
                else:
                    return [url,final_list,valid[0],None,title]
    
            else:
                driver.close()
                if(len(phone_numbers)>0):
                    return [url,final_list,None,phone_numbers[0],title]
                else:
                    return [url,final_list,None,None,title]
            
        except:
            driver.close()

    def getPhone(self,string):
        phone = ''
        phone_2 = ''
        phone_3 = ''
        phone_4 = ''
        phone_5 = ''
        phoneRegEx = re.compile('((?:\+\d{2}[-\.\s]??|\d{4}[-\.\s]??)?(?:\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\(\d{3}\)\s*\d{3}[-\.\s]??\d{4}|\d{3}[-\.\s]??\d{4}))')
        phoneRegEx_2 = re.compile('(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?')
        phoneRegEx_3 = re.compile('(\d{3}[-\.\s]??\d{3}[-\.\s]??\d{4}|\(\d{3}\)\s*\d{3}[-\.\s]??\d{4}|\d{3}[-\.\s]??\d{4})')
        phoneNumReg = re.compile(r'\d-\d\d\d-\d\d\d-\d\d\d')
        phoneNumReg_2 = re.compile(r'\d\d\d-\d\d\d\d\d\d\d')
        m = phoneRegEx.search(string)
        n = phoneRegEx_3.search(string)
        k = phoneRegEx_2.search(string)
        l = phoneNumReg.search(string)
        o = phoneNumReg_2.search(string)
        
        if m:
            phone = m.group(0)
            return phone
        if n:
            phone_3 = n.group(0)
            return phone_3
        if k:
            phone_2 = k.group(0)
            return phone_2
        if l:
            phone_4 = l.group(0)
            return phone_4
        if o:
            phone_5 = o.group(0)
            return phone_5
        
        return None
    
    
    
    def favicon_download(self,urls):
        count = 0
        string = "icon"
        counter = list()
    
        for url in urls:
            try:
                icons = favicon.get(url)
                icon = icons[0]
                path1 = os.getcwd()
                response = requests.get(icon.url, stream=True)
                # path = r'\icons\{}{}.{}'.format(string,count,icon.format)
                with open((path1)+ r'\icons\{}{}.{}'.format(string,count,icon.format), 'wb') as image:
                    for chunk in response.iter_content(1024):
                        image.write(chunk)
                        count += 1
                        counter.append(count)
        
        
            except:
                pass
        return counter

    def run_program(self, exFile, sheetName):    
        
        
        df = pd.read_excel(exFile, sheet_name = sheetName)
        
        g_column = df.iloc[:,6:7]
        
        print(len(g_column))
        r = 1
        c = 6
        k = 0
        links = list()
        QApplication.processEvents()
        for i in range(len(g_column)):
            QApplication.processEvents()
            wb = openpyxl.load_workbook(exFile)
                
            ws = wb.get_sheet_by_name(sheetName)
                    
            link = ws.cell(row = r, column = c).value
            
            if link == None:
                break
            else:
                links.append(link)
                r+=1
        QApplication.processEvents()
        for link in links:
            QApplication.processEvents()
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            driver =webdriver.Chrome(options=chrome_options)
                    
            driver.get(link)
            
            delay = 5
            
            try:
                myElem = WebDriverWait(driver, delay).until(EC.presence_of_element_located((By.XPATH, '//*[@id="mKlEF"]')))
                time.sleep(2)
                button = driver.find_element_by_xpath('//*[@id="mKlEF"]')
                time.sleep(2)
                button.send_keys(Keys.ENTER)
            
                print("Page is ready!")
            except TimeoutException:
                print("Loading took too much time!") 
            
            listem = []
            while(True):
                QApplication.processEvents()
                try:
                    soup = bs(driver.page_source,"html.parser")
                    all_elements = soup.find_all("a",class_="yYlJEf Q7PwXb L48Cpd")        
                    url_listesi = [i["href"] for i in all_elements]
                    listem = listem + url_listesi
                    driver.find_element_by_xpath('//*[@id="pnnext"]').click()
                    time.sleep(2)
            
                except:
                    break
            # print(f"url listesi {listem}")
            
            driver.close()
            url_mail = {}
            QApplication.processEvents()
            for url in url_listesi:
                QApplication.processEvents()
                if url == 0:
                    continue
                else:
                    returnlist = self.browser(url)
                    url_mail[url] = returnlist
            
            QApplication.processEvents()
            for key in url_mail:
                QApplication.processEvents()
                try:
                    if(url_mail[key][2] == None or url_mail[key][3] == None ):
                        
                        linkler = self.browser(key)[1]
                        # print(f"Linkler {linkler}")
                        for link in linkler:
                            returnValue = self.browser(link)
                            if(returnValue[2] != None and returnValue[3] != None):
                                url_mail[key] = returnValue
                                break
                                
                            elif(returnValue[2] != None):
                                url_mail[key] = returnValue
            
                            elif(returnValue[3] != None):
                                url_mail[key] = returnValue
                                    
                except:
                    pass
            site_link = list()
            email_address = list()
            title_list = list()
            phone_number = list()
            
            QApplication.processEvents()
            for items in url_mail:
                QApplication.processEvents()
                try:
                    # print(f"key: {items} value {url_mail[items][2]} tel number {url_mail[items][3]}")
                    site_link.append(items)
                    email_address.append(url_mail[items][2])
                    title_list.append(url_mail[items][4])
                    phone_number.append(url_mail[items][3])
                except:
                    pass
                
            run = self.favicon_download(url_listesi)   
            
            QApplication.processEvents()
            for i in range(len(site_link)):
                QApplication.processEvents()
                try:
                    # df.iloc[k:,3:4] = 
                    df.iloc[k:k+1,2:3] = site_link[i]
                    df.iloc[k:k+1,3:4] = email_address[i]
                    df.iloc[k:k+1,4:5] = phone_number[i]
                    df.iloc[k:k+1,1:2] = title_list[i]
                    k+=1
                except:
                    pass
                
            workbook = xlsxwriter.Workbook(exFile) # 
            
            worksheet = workbook.add_worksheet()
            
            count = 1
            path1 = os.getcwd()
            
            
            for i in run:
                QApplication.processEvents()
                worksheet.insert_image(f'E{count}',path1 + r'\icons\icon{i}.png')
                count+=1
                
            df.to_excel(exFile[:-4] + "xlsx", sheet_name = sheetName)
            

    def openFile(self):
        
        try:
            filename = QFileDialog.getOpenFileName(self,"Open File", "")
            self.filename = filename[0]
            self.fileLineEdit.setText(self.filename)
            df = openpyxl.load_workbook(self.filename)
            self.sheetNameComboBox.addItems(df.sheetnames)
        except:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Error")
            msg.setInformativeText('More information')
            msg.setWindowTitle("Error")
            msg.exec_()
            
        
    def run(self):

        if self.filename == None:

            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("None Data")
            msg.setWindowTitle("Error")
            msg.exec_()

        else:
            fileName = self.filename
            sheetName = self.sheetNameComboBox.currentText()

            print(fileName, sheetName)
            print(type(fileName), type(sheetName))
            self.runLabel.setText("Please Waiting...")
            self.run_program(fileName, sheetName)
            self.runLabel.setText("")
            self.finishBox.show()


















if __name__ == '__main__':
    app = QApplication(sys.argv)
    MAIN = Main()
    sys.exit(app.exec_())
